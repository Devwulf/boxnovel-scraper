{"version":3,"sources":["components/ThemeProvider.tsx","components/WebScraper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Themes","Light","foreground","background","Dark","ThemeContext","React","createContext","theme","toggleTheme","ThemeProvider","props","state","selectedTheme","bind","this","setState","children","Provider","value","Component","WebScraper","elements","loadSinglePage","loadPages","clearPage","loadPage","chapter","novelId","fetch","then","response","text","html","console","log","chapterFrom","chapterTo","i","$","cheerio","load","titleFound","each","index","element","push","isTitle","Consumer","className","map","key","library","add","fas","App","website","isNavOpen","toggleNav","disabled","onChange","event","target","htmlFor","type","parseInt","onClick","icon","callable","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8061f142.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ThemeColors = {\r\n    foreground: string;\r\n    background: string;\r\n}\r\n\r\nexport const Themes: {[key: string]: ThemeColors} = { \r\n    Light: { foreground: \"text-gray-800\", background: \"bg-gray-200\" },\r\n    Dark: { foreground: \"text-gray-400\", background: \"bg-gray-800\" }\r\n};\r\n\r\nexport const ThemeContext = React.createContext({theme: Themes.Dark, toggleTheme: () => {}});\r\n\r\nexport type ThemeProviderProps = {\r\n\r\n}\r\n\r\nexport type ThemeProviderState = {\r\n    selectedTheme: ThemeColors;\r\n}\r\n\r\nexport class ThemeProvider extends React.Component<ThemeProviderProps, ThemeProviderState> {\r\n    constructor(props: ThemeProviderProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTheme: Themes.Dark\r\n        };\r\n\r\n        this.toggleTheme = this.toggleTheme.bind(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        this.setState(state => ({selectedTheme: state.selectedTheme === Themes.Dark ? Themes.Light : Themes.Dark}));\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const { selectedTheme } = this.state;\r\n\r\n        return(\r\n            <ThemeContext.Provider value={{theme: selectedTheme, toggleTheme: this.toggleTheme}}>\r\n                {children}\r\n            </ThemeContext.Provider>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport cheerio, { html } from \"cheerio\";\r\nimport { ThemeContext } from \"./ThemeProvider\";\r\n\r\nexport type TextElement = {\r\n    isTitle: boolean;\r\n    value: string;\r\n}\r\n\r\nexport type WebScraperProps = {\r\n    novelId: string;\r\n    chapterFrom: number;\r\n    chapterTo: number;\r\n    loadPage: (callable: () => void) => void;\r\n    clearPage: (callable: () => void) => void;\r\n}\r\n\r\nexport type WebScraperState = {\r\n    elements: TextElement[];\r\n}\r\n\r\nexport default class WebScraper extends React.Component<WebScraperProps, WebScraperState> {\r\n    constructor(props: WebScraperProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            elements: []\r\n        };\r\n\r\n        this.loadSinglePage = this.loadSinglePage.bind(this);\r\n        this.loadPages = this.loadPages.bind(this);\r\n        this.clearPage = this.clearPage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadPage(this.loadPages);\r\n        this.props.clearPage(this.clearPage);\r\n    }\r\n\r\n    async loadSinglePage(chapter: number): Promise<string> {\r\n        const { novelId } = this.props;\r\n\r\n        const html = await fetch(`https://cors-anywhere.herokuapp.com/https://boxnovel.com/novel/${novelId}/chapter-${chapter}/`)\r\n            .then(response => response.text());\r\n        \r\n        return html;\r\n    }\r\n\r\n    async loadPages() {\r\n        console.log(\"test\");\r\n        const { chapterFrom, chapterTo } = this.props;\r\n        const elements: TextElement[] = [];\r\n\r\n        for (var i = chapterFrom; i <= chapterTo; i++) {\r\n            const html = await this.loadSinglePage(i);\r\n            if (html) {\r\n                const $ = cheerio.load(html);\r\n                let titleFound: boolean = false;\r\n                $(\"div.text-left h3\").each((index, element) => {\r\n                    elements.push({ isTitle: true, value: $(element).text()});\r\n                    titleFound = true;\r\n                });\r\n\r\n                $(\"div.text-left p\").each((index, element) => {\r\n                    elements.push({ isTitle: !titleFound && index === 0, value: $(element).text()});\r\n                });\r\n            }\r\n        }\r\n\r\n        this.setState({elements});\r\n    }\r\n\r\n    clearPage() {\r\n        this.setState({elements: []});\r\n    }\r\n\r\n    render() {\r\n        const { elements } = this.state;\r\n\r\n        return(\r\n            <ThemeContext.Consumer>\r\n                {(theme => (\r\n                    <article className={`px-4 ${theme.theme.background} ${theme.theme.foreground}`}>\r\n                        <section>\r\n                            {elements.map((element, index) => \r\n                                (element.isTitle &&\r\n                                    <h3 key={index} className=\"text-xl font-medium mt-6 mb-4\">{element.value}</h3>\r\n                                ) || \r\n                                (!element.isTitle &&\r\n                                    <p key={index} className=\"pb-2\">{element.value}</p>\r\n                                )\r\n                            )}\r\n                        </section>\r\n                    </article>\r\n                ))}\r\n            </ThemeContext.Consumer>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"./assets/main.css\";\r\nimport WebScraper from \"./components/WebScraper\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ThemeContext, ThemeProvider } from \"./components/ThemeProvider\";\r\n\r\nlibrary.add(fas);\r\n\r\nexport type AppProps = {\r\n\r\n}\r\n\r\nexport type AppState = {\r\n    website: string;\r\n    novelId: string;\r\n    chapterFrom: number;\r\n    chapterTo: number;\r\n    isNavOpen: boolean;\r\n    loadPage: () => void;\r\n    clearPage: () => void;\r\n}\r\n\r\nexport default class App extends React.Component<AppProps, AppState> {\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            website: \"BoxNovel\",\r\n            novelId: \"super-gene-webnovel\",\r\n            chapterFrom: 1,\r\n            chapterTo: 1,\r\n            isNavOpen: true,\r\n            loadPage: () => {},\r\n            clearPage: () => {}\r\n        };\r\n\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n    }\r\n\r\n    toggleNav() {\r\n        const { isNavOpen } = this.state;\r\n        if (isNavOpen)\r\n            this.setState({isNavOpen: false});\r\n        else\r\n            this.setState({isNavOpen: true});\r\n    }\r\n\r\n    render() {\r\n        const { website, novelId, chapterFrom, chapterTo, isNavOpen, loadPage, clearPage } = this.state;\r\n\r\n        return (\r\n            <ThemeProvider>\r\n                <ThemeContext.Consumer>\r\n                    {(theme => (\r\n                        <div className={`${theme.theme.background}`}>\r\n                            <nav className={`${isNavOpen ? \"\" : \"hidden\"} options p-4 bg-gray-800`}>\r\n                                <div className=\"flex flex-col mb-4\">\r\n                                    <label className=\"mb-1 font-medium text-gray-100\">Website</label>\r\n                                    <select className=\"px-1 rounded text-lg border-2 border-gray-500 bg-gray-300\" \r\n                                        disabled\r\n                                        value={website}\r\n                                        onChange={event => this.setState({website: event.target.value})}>\r\n                                        <option value=\"BoxNovel\">Box Novel (boxnovel.com)</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div className=\"flex flex-col mb-4\">\r\n                                    <label className=\"mb-1 font-medium text-gray-100\" htmlFor=\"\">Novel Id</label>\r\n                                    <input className=\"px-2 rounded text-lg border-2 border-gray-500 bg-gray-300\" \r\n                                        type=\"text\"\r\n                                        value={novelId}\r\n                                        onChange={event => this.setState({novelId: event.target.value})} />\r\n                                </div>\r\n                    \r\n                                <label className=\"font-medium text-gray-100\" htmlFor=\"\">Chapters</label>\r\n                                <div className=\"flex flex-row mb-4\">\r\n                                    <div className=\"flex flex-col mr-4\">\r\n                                        <label className=\"mb-1 text-gray-100\" htmlFor=\"\">From</label>\r\n                                        <input className=\"px-2 rounded text-lg border-2 border-gray-500 bg-gray-300\" \r\n                                            type=\"number\"\r\n                                            value={chapterFrom}\r\n                                            onChange={event => this.setState({chapterFrom: parseInt(event.target.value)})} />\r\n                                    </div>\r\n                                    <div className=\"flex flex-col\">\r\n                                        <label className=\"mb-1 text-gray-100\" htmlFor=\"\">To</label>\r\n                                        <input className=\"px-2 rounded text-lg border-2 border-gray-500 bg-gray-300\" \r\n                                            type=\"number\"\r\n                                            value={chapterTo}\r\n                                            onChange={event => this.setState({chapterTo: parseInt(event.target.value)})} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"flex justify-between\">\r\n                                    <div className=\"mb-1\">\r\n                                        <button className=\"px-3 py-1 mr-4 rounded bg-blue-500 text-gray-100 hover:bg-blue-400\"\r\n                                            onClick={() => {\r\n                                                clearPage();\r\n                                                loadPage();\r\n                                            }}>\r\n                                            Generate\r\n                                        </button>\r\n                                        <button className=\"px-3 py-1 rounded bg-gray-600 text-gray-100 hover:bg-gray-500\"\r\n                                            onClick={() => clearPage()}>\r\n                                            Clear\r\n                                        </button>\r\n                                    </div>\r\n                                    <button className=\"px-3 py-1 mb-1 rounded bg-green-500 text-gray-100 hover:bg-green-400\"\r\n                                        onClick={() => theme.toggleTheme()}>\r\n                                        Toggle Theme\r\n                                    </button>\r\n                                </div>\r\n                            </nav>\r\n                            <button className=\"w-full py-2 flex justify-center items-center rounded-b-lg bg-gray-700 text-gray-100 hover:bg-gray-600\"\r\n                                onClick={() => this.toggleNav()}>\r\n                                {(isNavOpen &&\r\n                                    <FontAwesomeIcon icon=\"chevron-up\" />\r\n                                ) ||\r\n                                (!isNavOpen &&\r\n                                    <FontAwesomeIcon icon=\"chevron-down\" />\r\n                                )}\r\n                            </button>\r\n                \r\n                            <main className=\"reading-content\">\r\n                                <WebScraper novelId={novelId} \r\n                                    chapterFrom={chapterFrom} \r\n                                    chapterTo={chapterTo}\r\n                                    loadPage={callable => this.setState({loadPage: callable})}\r\n                                    clearPage={callable => this.setState({clearPage: callable})} />\r\n                            </main>\r\n                        </div>\r\n                    ))}\r\n                </ThemeContext.Consumer>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}