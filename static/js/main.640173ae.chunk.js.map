{"version":3,"sources":["components/ThemeProvider.tsx","components/LoadingBar.tsx","components/BoxNovelScraper.tsx","components/ReadLightNovelScraper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Themes","Light","foreground","background","Dark","ThemeContext","React","createContext","theme","toggleTheme","ThemeProvider","props","state","selectedTheme","bind","this","setState","children","Provider","value","Component","LoadingBar","currentItems","totalItems","console","log","className","style","width","marginTop","BoxNovelScraper","elements","pagesLoaded","totalPages","isLoading","loadSinglePage","loadPages","clearPage","loadPage","chapter","novelId","fetch","then","response","text","html","chapterFrom","chapterTo","i","$","cheerio","load","titleFound","rootDiv","find","each","index","element","push","isTitle","prevState","Consumer","map","key","ReadLightNovelScraper","library","add","fas","App","website","isNavOpen","toggleNav","onChange","event","target","htmlFor","type","parseInt","onClick","icon","callable","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qbAOaA,EAAuC,CAChDC,MAAO,CAAEC,WAAY,gBAAiBC,WAAY,eAClDC,KAAM,CAAEF,WAAY,gBAAiBC,WAAY,gBAGxCE,EAAeC,IAAMC,cAAc,CAACC,MAAOR,EAAOI,KAAMK,YAAa,eAUrEC,EAAb,kDACI,WAAYC,GAA4B,IAAD,8BACnC,cAAMA,IAEDC,MAAQ,CACTC,cAAeb,EAAOI,MAG1B,EAAKK,YAAc,EAAKA,YAAYK,KAAjB,gBAPgB,EAD3C,0DAYQC,KAAKC,UAAS,SAAAJ,GAAK,MAAK,CAACC,cAAeD,EAAMC,gBAAkBb,EAAOI,KAAOJ,EAAOC,MAAQD,EAAOI,WAZ5G,+BAec,IACEa,EAAaF,KAAKJ,MAAlBM,SACAJ,EAAkBE,KAAKH,MAAvBC,cAER,OACI,kBAACR,EAAaa,SAAd,CAAuBC,MAAO,CAACX,MAAOK,EAAeJ,YAAaM,KAAKN,cAClEQ,OArBjB,GAAmCX,IAAMc,WCXpBC,E,uKACP,IAAD,EACgCN,KAAKJ,MAAlCW,EADH,EACGA,aAAcC,EADjB,EACiBA,WAGtB,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,sBACX,yBAAKA,UAAU,kBAAkBC,MAAO,CAACC,MAAM,GAAD,OAAMN,EAAeC,EAAc,IAAnC,QAC9C,yBAAKG,UAAU,mCAAmCC,MAAO,CAACE,UAAW,YACjE,0BAAMH,UAAU,oBAAhB,UAAuCJ,EAAvC,YAAuDC,IACvD,wCAAWD,EAAeC,EAAc,IAAxC,Y,GAVoBjB,IAAMc,WCczBU,E,kDACjB,WAAYnB,GAA8B,IAAD,8BACrC,cAAMA,IAEDC,MAAQ,CACTmB,SAAU,GACVC,YAAa,EACbC,WAAY,EACZC,WAAW,GAGf,EAAKC,eAAiB,EAAKA,eAAerB,KAApB,gBACtB,EAAKsB,UAAY,EAAKA,UAAUtB,KAAf,gBACjB,EAAKuB,UAAY,EAAKA,UAAUvB,KAAf,gBAZoB,E,gEAgBrCC,KAAKJ,MAAM2B,SAASvB,KAAKqB,WACzBrB,KAAKJ,MAAM0B,UAAUtB,KAAKsB,a,8EAGTE,G,gFACTC,EAAYzB,KAAKJ,MAAjB6B,Q,SAEWC,MAAM,kEAAD,OAAmED,EAAnE,oBAAsFD,EAAtF,MACnBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,cADzBC,E,yBAGCA,G,qQAI4B9B,KAAKJ,MAAhCmC,E,EAAAA,YAAaC,E,EAAAA,UACfhB,EAA0B,GAChChB,KAAKC,SAAS,CAACkB,WAAW,EAAMF,YAAa,EAAGC,WAAac,EAAYD,EAAe,IAE/EE,EAAIF,E,YAAaE,GAAKD,G,iCACRhC,KAAKoB,eAAea,G,QAAjCH,E,SACK,WACP,IAAMI,EAAIC,IAAQC,KAAKN,GACnBO,GAAsB,EACpBC,EAAUJ,EAAE,iBAClBI,EAAQC,KAAK,0BAA0BC,MAAK,SAACC,EAAOC,GAChD1B,EAAS2B,KAAK,CAAEC,SAAS,EAAMxC,MAAO8B,EAAEQ,GAASb,SACjDQ,GAAa,KAGjBC,EAAQC,KAAK,KAAKC,MAAK,SAACC,EAAOC,GAC3B1B,EAAS2B,KAAK,CAAEC,SAAUP,GAAwB,IAAVI,EAAarC,MAAO8B,EAAEQ,GAASb,YAVpE,GAcX7B,KAAKC,UAAS,SAAA4C,GAAS,MAAK,CAAC5B,YAAa4B,EAAU5B,YAAc,M,QAhB5BgB,I,uBAmB1CjC,KAAKC,SAAS,CAACe,SAAUA,EAAUG,WAAW,I,yIAI9CnB,KAAKC,SAAS,CAACe,SAAU,O,+BAGnB,IAAD,EACoDhB,KAAKH,MAAtDoB,EADH,EACGA,YAAaC,EADhB,EACgBA,WAAYC,EAD5B,EAC4BA,UAAWH,EADvC,EACuCA,SAE5C,OACI,kBAAC1B,EAAawD,SAAd,MACM,SAAArD,GAAK,OACH,oCACI,yBAAKkB,UAAU,IACX,yBAAKA,UAAS,UAAKQ,EAAY,GAAK,WAChC,kBAAC,EAAD,CAAYZ,aAAcU,EAAaT,WAAYU,MAG3D,6BAASP,UAAS,eAAUlB,EAAMA,MAAML,WAAtB,YAAoCK,EAAMA,MAAMN,aAC9D,iCACK6B,EAAS+B,KAAI,SAACL,EAASD,GAAV,OACTC,EAAQE,SACL,wBAAII,IAAKP,EAAO9B,UAAU,iCAAiC+B,EAAQtC,SAErEsC,EAAQE,SACN,uBAAGI,IAAKP,EAAO9B,UAAU,QAAQ+B,EAAQtC,oB,GAhFpCb,IAAMc,W,yBCJ9B4C,E,kDACjB,WAAYrD,GAAoC,IAAD,8BAC3C,cAAMA,IAEDC,MAAQ,CACTmB,SAAU,GACVC,YAAa,EACbC,WAAY,EACZC,WAAW,GAGf,EAAKC,eAAiB,EAAKA,eAAerB,KAApB,gBACtB,EAAKsB,UAAY,EAAKA,UAAUtB,KAAf,gBACjB,EAAKuB,UAAY,EAAKA,UAAUvB,KAAf,gBAZ0B,E,gEAgB3CC,KAAKJ,MAAM2B,SAASvB,KAAKqB,WACzBrB,KAAKJ,MAAM0B,UAAUtB,KAAKsB,a,8EAGTE,G,gFACTC,EAAYzB,KAAKJ,MAAjB6B,Q,SAEWC,MAAM,sEAAD,OAAuED,EAAvE,oBAA0FD,EAA1F,MACnBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,U,cADzBC,E,yBAGCA,G,qQAI4B9B,KAAKJ,MAAhCmC,E,EAAAA,YAAaC,E,EAAAA,UACfhB,EAA0B,GAChChB,KAAKC,SAAS,CAACkB,WAAW,EAAMF,YAAa,EAAGC,WAAac,EAAYD,EAAe,IAE/EE,EAAIF,E,YAAaE,GAAKD,G,iCACRhC,KAAKoB,eAAea,G,QAAjCH,E,SACK,WACP,IAAMI,EAAIC,IAAQC,KAAKN,GACnBO,GAAsB,EACpBC,EAAUJ,EAAE,wBAClBI,EAAQC,KAAK,qCAAqCC,MAAK,SAACC,EAAOC,GACvDL,IAGJrB,EAAS2B,KAAK,CAAEC,SAAS,EAAMxC,MAAO8B,EAAEQ,GAASb,SACjDQ,GAAa,MAGjBC,EAAQC,KAAK,gBAAgBC,MAAK,SAACC,EAAOC,GACtC1B,EAAS2B,KAAK,CAAEC,SAAUP,GAAwB,IAAVI,EAAarC,MAAO8B,EAAEQ,GAASb,YAbpE,GAiBX7B,KAAKC,UAAS,SAAA4C,GAAS,MAAK,CAAC5B,YAAa4B,EAAU5B,YAAc,M,QAnB5BgB,I,uBAsB1CjC,KAAKC,SAAS,CAACe,SAAUA,EAAUG,WAAW,I,yIAI9CnB,KAAKC,SAAS,CAACe,SAAU,O,+BAGnB,IAAD,EACoDhB,KAAKH,MAAtDoB,EADH,EACGA,YAAaC,EADhB,EACgBA,WAAYC,EAD5B,EAC4BA,UAAWH,EADvC,EACuCA,SAE5C,OACI,kBAAC1B,EAAawD,SAAd,MACM,SAAArD,GAAK,OACH,oCACI,yBAAKkB,UAAU,IACX,yBAAKA,UAAS,UAAKQ,EAAY,GAAK,WAChC,kBAAC,EAAD,CAAYZ,aAAcU,EAAaT,WAAYU,MAG3D,6BAASP,UAAS,eAAUlB,EAAMA,MAAML,WAAtB,YAAoCK,EAAMA,MAAMN,aAC9D,iCACK6B,EAAS+B,KAAI,SAACL,EAASD,GAAV,OACTC,EAAQE,SACL,wBAAII,IAAKP,EAAO9B,UAAU,iCAAiC+B,EAAQtC,SAErEsC,EAAQE,SACN,uBAAGI,IAAKP,EAAO9B,UAAU,QAAQ+B,EAAQtC,oB,GAnF9Bb,IAAMc,WCTzD6C,IAAQC,IAAIC,K,IAgBSC,E,kDACjB,WAAYzD,GAAkB,IAAD,8BACzB,cAAMA,IAEDC,MAAQ,CACTyD,QAAS,WACT7B,QAAS,sBACTM,YAAa,EACbC,UAAW,EACXuB,WAAW,EACXhC,SAAU,aACVD,UAAW,cAGf,EAAKkC,UAAY,EAAKA,UAAUzD,KAAf,gBAbQ,E,wDAiBHC,KAAKH,MAAnB0D,UAEJvD,KAAKC,SAAS,CAACsD,WAAW,IAE1BvD,KAAKC,SAAS,CAACsD,WAAW,M,+BAGxB,IAAD,SACgFvD,KAAKH,MAAlFyD,EADH,EACGA,QAAS7B,EADZ,EACYA,QAASM,EADrB,EACqBA,YAAaC,EADlC,EACkCA,UAAWuB,EAD7C,EAC6CA,UAAWhC,EADxD,EACwDA,SAAUD,EADlE,EACkEA,UAEvE,OACI,kBAAC,EAAD,KACI,kBAAChC,EAAawD,SAAd,MACM,SAAArD,GAAK,OACH,yBAAKkB,UAAS,UAAKlB,EAAMA,MAAML,aAC3B,yBAAKuB,UAAS,UAAK4C,EAAY,GAAK,SAAtB,6BACV,yBAAK5C,UAAU,sBACX,2BAAOA,UAAU,kCAAjB,WACA,4BAAQA,UAAU,4DACdP,MAAOkD,EACPG,SAAU,SAAAC,GAAK,OAAI,EAAKzD,SAAS,CAACqD,QAASI,EAAMC,OAAOvD,UACxD,4BAAQA,MAAM,YAAd,4BACA,4BAAQA,MAAM,kBAAd,2CAGR,yBAAKO,UAAU,sBACX,2BAAOA,UAAU,iCAAiCiD,QAAQ,IAA1D,YACA,2BAAOjD,UAAU,4DACbkD,KAAK,OACLzD,MAAOqB,EACPgC,SAAU,SAAAC,GAAK,OAAI,EAAKzD,SAAS,CAACwB,QAASiC,EAAMC,OAAOvD,YAGhE,2BAAOO,UAAU,4BAA4BiD,QAAQ,IAArD,YACA,yBAAKjD,UAAU,sBACX,yBAAKA,UAAU,sBACX,2BAAOA,UAAU,qBAAqBiD,QAAQ,IAA9C,QACA,2BAAOjD,UAAU,4DACbkD,KAAK,SACLzD,MAAO2B,EACP0B,SAAU,SAAAC,GAAK,OAAI,EAAKzD,SAAS,CAAC8B,YAAa+B,SAASJ,EAAMC,OAAOvD,aAE7E,yBAAKO,UAAU,iBACX,2BAAOA,UAAU,qBAAqBiD,QAAQ,IAA9C,MACA,2BAAOjD,UAAU,4DACbkD,KAAK,SACLzD,MAAO4B,EACPyB,SAAU,SAAAC,GAAK,OAAI,EAAKzD,SAAS,CAAC+B,UAAW8B,SAASJ,EAAMC,OAAOvD,cAG/E,yBAAKO,UAAU,wBACX,yBAAKA,UAAU,QACX,4BAAQA,UAAU,qEACdoD,QAAS,WACLzC,IACAC,MAHR,YAOA,4BAAQZ,UAAU,gEACdoD,QAAS,kBAAMzC,MADnB,UAKJ,4BAAQX,UAAU,uEACdoD,QAAS,kBAAMtE,EAAMC,gBADzB,kBAMR,4BAAQiB,UAAU,wGACdoD,QAAS,kBAAM,EAAKP,cAClBD,GACE,kBAAC,IAAD,CAAiBS,KAAK,iBAExBT,GACE,kBAAC,IAAD,CAAiBS,KAAK,kBAI9B,0BAAMrD,UAAU,mBACE,aAAZ2C,GACE,kBAAC,EAAD,CAAiB7B,QAASA,EACtBM,YAAaA,EACbC,UAAWA,EACXT,SAAU,SAAA0C,GAAQ,OAAI,EAAKhE,SAAS,CAACsB,SAAU0C,KAC/C3C,UAAW,SAAA2C,GAAQ,OAAI,EAAKhE,SAAS,CAACqB,UAAW2C,QAE5C,mBAAZX,GAEG,kBAAC,EAAD,CAAuB7B,QAASA,EAC5BM,YAAaA,EACbC,UAAWA,EACXT,SAAU,SAAA0C,GAAQ,OAAI,EAAKhE,SAAS,CAACsB,SAAU0C,KAC/C3C,UAAW,SAAA2C,GAAQ,OAAI,EAAKhE,SAAS,CAACqB,UAAW2C,iB,GAhHxD1E,IAAMc,WChBjC6D,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACT9C,MAAK,SAAAmD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnF,QACf8E,UAAUC,cAAcO,YAI1B1E,QAAQC,IACN,iHAKEgE,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBrE,QAAQC,IAAI,sCAGRgE,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACL9E,QAAQ8E,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACpBC,oBACA1B,OAAOC,SAAS0B,MAEJC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,oBAAN,sBAEP5B,IAgEV,SAAiCO,EAAeC,GAE9ChD,MAAM+C,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BvE,MAAK,SAAAC,GAEJ,IAAMuE,EAAcvE,EAASsE,QAAQE,IAAI,gBAEnB,MAApBxE,EAASyE,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAM5E,MAAK,SAAAmD,GACjCA,EAAa0B,aAAa7E,MAAK,WAC7ByC,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1BY,OAAM,WACL7E,QAAQC,IACN,oEAvFAgG,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAM5E,MAAK,WACjClB,QAAQC,IACN,iHAMJ8D,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.640173ae.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type ThemeColors = {\r\n    foreground: string;\r\n    background: string;\r\n}\r\n\r\nexport const Themes: {[key: string]: ThemeColors} = { \r\n    Light: { foreground: \"text-gray-800\", background: \"bg-gray-200\" },\r\n    Dark: { foreground: \"text-gray-400\", background: \"bg-gray-800\" }\r\n};\r\n\r\nexport const ThemeContext = React.createContext({theme: Themes.Dark, toggleTheme: () => {}});\r\n\r\nexport type ThemeProviderProps = {\r\n\r\n}\r\n\r\nexport type ThemeProviderState = {\r\n    selectedTheme: ThemeColors;\r\n}\r\n\r\nexport class ThemeProvider extends React.Component<ThemeProviderProps, ThemeProviderState> {\r\n    constructor(props: ThemeProviderProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedTheme: Themes.Dark\r\n        };\r\n\r\n        this.toggleTheme = this.toggleTheme.bind(this);\r\n    }\r\n\r\n    toggleTheme() {\r\n        this.setState(state => ({selectedTheme: state.selectedTheme === Themes.Dark ? Themes.Light : Themes.Dark}));\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        const { selectedTheme } = this.state;\r\n\r\n        return(\r\n            <ThemeContext.Provider value={{theme: selectedTheme, toggleTheme: this.toggleTheme}}>\r\n                {children}\r\n            </ThemeContext.Provider>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport type LoadingBarProps = {\r\n    currentItems: number;\r\n    totalItems: number;\r\n}\r\n\r\nexport type LoadingBarState = {\r\n\r\n}\r\n\r\nexport default class LoadingBar extends React.Component<LoadingBarProps, LoadingBarState> {\r\n    render() {\r\n        const { currentItems, totalItems } = this.props;\r\n\r\n        console.log(totalItems);\r\n        return(\r\n            <div className=\"w-full bg-gray-400\">\r\n                <div className=\"h-6 bg-blue-500\" style={{width: `${(currentItems / totalItems) * 100}%`}}></div>\r\n                <div className=\"flex justify-center items-center\" style={{marginTop: \"-1.5rem\"}}>\r\n                    <span className=\"font-medium mr-2\">{`${currentItems}/${totalItems}`}</span>\r\n                    <span>{`${(currentItems / totalItems) * 100}%`}</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport cheerio from \"cheerio\";\r\nimport { ThemeContext } from \"./ThemeProvider\";\r\nimport LoadingBar from \"./LoadingBar\";\r\n\r\nexport type TextElement = {\r\n    isTitle: boolean;\r\n    value: string;\r\n}\r\n\r\nexport type BoxNovelScraperProps = {\r\n    novelId: string;\r\n    chapterFrom: number;\r\n    chapterTo: number;\r\n    loadPage: (callable: () => void) => void;\r\n    clearPage: (callable: () => void) => void;\r\n}\r\n\r\nexport type BoxNovelScraperState = {\r\n    elements: TextElement[];\r\n    pagesLoaded: number;\r\n    totalPages: number;\r\n    isLoading: boolean;\r\n}\r\n\r\nexport default class BoxNovelScraper extends React.Component<BoxNovelScraperProps, BoxNovelScraperState> {\r\n    constructor(props: BoxNovelScraperProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            elements: [],\r\n            pagesLoaded: 0,\r\n            totalPages: 0,\r\n            isLoading: false\r\n        };\r\n\r\n        this.loadSinglePage = this.loadSinglePage.bind(this);\r\n        this.loadPages = this.loadPages.bind(this);\r\n        this.clearPage = this.clearPage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadPage(this.loadPages);\r\n        this.props.clearPage(this.clearPage);\r\n    }\r\n\r\n    async loadSinglePage(chapter: number): Promise<string> {\r\n        const { novelId } = this.props;\r\n\r\n        const html = await fetch(`https://cors-anywhere.herokuapp.com/https://boxnovel.com/novel/${novelId}/chapter-${chapter}/`)\r\n            .then(response => response.text());\r\n        \r\n        return html;\r\n    }\r\n\r\n    async loadPages() {\r\n        const { chapterFrom, chapterTo } = this.props;\r\n        const elements: TextElement[] = [];\r\n        this.setState({isLoading: true, pagesLoaded: 0, totalPages: (chapterTo - chapterFrom) + 1});\r\n\r\n        for (var i = chapterFrom; i <= chapterTo; i++) {\r\n            const html = await this.loadSinglePage(i);\r\n            if (html) {\r\n                const $ = cheerio.load(html);\r\n                let titleFound: boolean = false;\r\n                const rootDiv = $(\"div.text-left\");\r\n                rootDiv.find(\"h1, h2, h3, h4, h5, h6\").each((index, element) => {\r\n                    elements.push({ isTitle: true, value: $(element).text()});\r\n                    titleFound = true;\r\n                });\r\n\r\n                rootDiv.find(\"p\").each((index, element) => {\r\n                    elements.push({ isTitle: !titleFound && index === 0, value: $(element).text()});\r\n                });\r\n            }\r\n\r\n            this.setState(prevState => ({pagesLoaded: prevState.pagesLoaded + 1}));\r\n        }\r\n\r\n        this.setState({elements: elements, isLoading: false});\r\n    }\r\n\r\n    clearPage() {\r\n        this.setState({elements: []});\r\n    }\r\n\r\n    render() {\r\n        const { pagesLoaded, totalPages, isLoading, elements } = this.state;\r\n\r\n        return(\r\n            <ThemeContext.Consumer>\r\n                {(theme => (\r\n                    <>\r\n                        <div className=\"\">\r\n                            <div className={`${isLoading ? \"\" : \"hidden\"}`}>\r\n                                <LoadingBar currentItems={pagesLoaded} totalItems={totalPages} />\r\n                            </div>\r\n                        </div>\r\n                        <article className={`px-4 ${theme.theme.background} ${theme.theme.foreground}`}>\r\n                            <section>\r\n                                {elements.map((element, index) => \r\n                                    (element.isTitle &&\r\n                                        <h3 key={index} className=\"text-xl font-medium mt-6 mb-4\">{element.value}</h3>\r\n                                    ) || \r\n                                    (!element.isTitle &&\r\n                                        <p key={index} className=\"pb-2\">{element.value}</p>\r\n                                    )\r\n                                )}\r\n                            </section>\r\n                        </article>\r\n                    </>\r\n                ))}\r\n            </ThemeContext.Consumer>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport cheerio from \"cheerio\";\r\nimport { ThemeContext } from \"./ThemeProvider\";\r\nimport LoadingBar from \"./LoadingBar\";\r\nimport { TextElement } from \"./BoxNovelScraper\";\r\n\r\nexport type ReadLightNovelScraperProps = {\r\n    novelId: string;\r\n    chapterFrom: number;\r\n    chapterTo: number;\r\n    loadPage: (callable: () => void) => void;\r\n    clearPage: (callable: () => void) => void;\r\n}\r\n\r\nexport type ReadLightNovelScraperState = {\r\n    elements: TextElement[];\r\n    pagesLoaded: number;\r\n    totalPages: number;\r\n    isLoading: boolean;\r\n}\r\n\r\nexport default class ReadLightNovelScraper extends React.Component<ReadLightNovelScraperProps, ReadLightNovelScraperState> {\r\n    constructor(props: ReadLightNovelScraperProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            elements: [],\r\n            pagesLoaded: 0,\r\n            totalPages: 0,\r\n            isLoading: false\r\n        };\r\n\r\n        this.loadSinglePage = this.loadSinglePage.bind(this);\r\n        this.loadPages = this.loadPages.bind(this);\r\n        this.clearPage = this.clearPage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.loadPage(this.loadPages);\r\n        this.props.clearPage(this.clearPage);\r\n    }\r\n\r\n    async loadSinglePage(chapter: number): Promise<string> {\r\n        const { novelId } = this.props;\r\n\r\n        const html = await fetch(`https://cors-anywhere.herokuapp.com/https://www.readlightnovel.org/${novelId}/chapter-${chapter}/`)\r\n            .then(response => response.text());\r\n        \r\n        return html;\r\n    }\r\n\r\n    async loadPages() {\r\n        const { chapterFrom, chapterTo } = this.props;\r\n        const elements: TextElement[] = [];\r\n        this.setState({isLoading: true, pagesLoaded: 0, totalPages: (chapterTo - chapterFrom) + 1});\r\n\r\n        for (var i = chapterFrom; i <= chapterTo; i++) {\r\n            const html = await this.loadSinglePage(i);\r\n            if (html) {\r\n                const $ = cheerio.load(html);\r\n                let titleFound: boolean = false;\r\n                const rootDiv = $(\"div.chapter-content3\");\r\n                rootDiv.find(\"div.desc > h1, h2, h3, h4, h5, h6\").each((index, element) => {\r\n                    if (titleFound)\r\n                        return;\r\n\r\n                    elements.push({ isTitle: true, value: $(element).text()});\r\n                    titleFound = true;\r\n                });\r\n\r\n                rootDiv.find(\"div.desc > p\").each((index, element) => {\r\n                    elements.push({ isTitle: !titleFound && index === 0, value: $(element).text()});\r\n                });\r\n            }\r\n\r\n            this.setState(prevState => ({pagesLoaded: prevState.pagesLoaded + 1}));\r\n        }\r\n\r\n        this.setState({elements: elements, isLoading: false});\r\n    }\r\n\r\n    clearPage() {\r\n        this.setState({elements: []});\r\n    }\r\n\r\n    render() {\r\n        const { pagesLoaded, totalPages, isLoading, elements } = this.state;\r\n\r\n        return(\r\n            <ThemeContext.Consumer>\r\n                {(theme => (\r\n                    <>\r\n                        <div className=\"\">\r\n                            <div className={`${isLoading ? \"\" : \"hidden\"}`}>\r\n                                <LoadingBar currentItems={pagesLoaded} totalItems={totalPages} />\r\n                            </div>\r\n                        </div>\r\n                        <article className={`px-4 ${theme.theme.background} ${theme.theme.foreground}`}>\r\n                            <section>\r\n                                {elements.map((element, index) => \r\n                                    (element.isTitle &&\r\n                                        <h3 key={index} className=\"text-xl font-medium mt-6 mb-4\">{element.value}</h3>\r\n                                    ) || \r\n                                    (!element.isTitle &&\r\n                                        <p key={index} className=\"pb-2\">{element.value}</p>\r\n                                    )\r\n                                )}\r\n                            </section>\r\n                        </article>\r\n                    </>\r\n                ))}\r\n            </ThemeContext.Consumer>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport \"./assets/main.css\";\r\nimport BoxNovelScraper from \"./components/BoxNovelScraper\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ThemeContext, ThemeProvider } from \"./components/ThemeProvider\";\r\nimport ReadLightNovelScraper from \"./components/ReadLightNovelScraper\";\r\n\r\nlibrary.add(fas);\r\n\r\nexport type AppProps = {\r\n\r\n}\r\n\r\nexport type AppState = {\r\n    website: string;\r\n    novelId: string;\r\n    chapterFrom: number;\r\n    chapterTo: number;\r\n    isNavOpen: boolean;\r\n    loadPage: () => void;\r\n    clearPage: () => void;\r\n}\r\n\r\nexport default class App extends React.Component<AppProps, AppState> {\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            website: \"BoxNovel\",\r\n            novelId: \"super-gene-webnovel\",\r\n            chapterFrom: 1,\r\n            chapterTo: 1,\r\n            isNavOpen: true,\r\n            loadPage: () => {},\r\n            clearPage: () => {}\r\n        };\r\n\r\n        this.toggleNav = this.toggleNav.bind(this);\r\n    }\r\n\r\n    toggleNav() {\r\n        const { isNavOpen } = this.state;\r\n        if (isNavOpen)\r\n            this.setState({isNavOpen: false});\r\n        else\r\n            this.setState({isNavOpen: true});\r\n    }\r\n\r\n    render() {\r\n        const { website, novelId, chapterFrom, chapterTo, isNavOpen, loadPage, clearPage } = this.state;\r\n\r\n        return (\r\n            <ThemeProvider>\r\n                <ThemeContext.Consumer>\r\n                    {(theme => (\r\n                        <div className={`${theme.theme.background}`}>\r\n                            <nav className={`${isNavOpen ? \"\" : \"hidden\"} options p-4 bg-gray-800`}>\r\n                                <div className=\"flex flex-col mb-4\">\r\n                                    <label className=\"mb-1 font-medium text-gray-100\">Website</label>\r\n                                    <select className=\"px-1 rounded text-lg border-2 border-gray-500 bg-gray-300\"\r\n                                        value={website}\r\n                                        onChange={event => this.setState({website: event.target.value})}>\r\n                                        <option value=\"BoxNovel\">Box Novel (boxnovel.com)</option>\r\n                                        <option value=\"ReadLightNovel\">Read Light Novel (readlightnovel.org)</option>\r\n                                    </select>\r\n                                </div>\r\n                                <div className=\"flex flex-col mb-4\">\r\n                                    <label className=\"mb-1 font-medium text-gray-100\" htmlFor=\"\">Novel Id</label>\r\n                                    <input className=\"px-2 rounded text-lg border-2 border-gray-500 bg-gray-300\" \r\n                                        type=\"text\"\r\n                                        value={novelId}\r\n                                        onChange={event => this.setState({novelId: event.target.value})} />\r\n                                </div>\r\n                    \r\n                                <label className=\"font-medium text-gray-100\" htmlFor=\"\">Chapters</label>\r\n                                <div className=\"flex flex-row mb-4\">\r\n                                    <div className=\"flex flex-col mr-4\">\r\n                                        <label className=\"mb-1 text-gray-100\" htmlFor=\"\">From</label>\r\n                                        <input className=\"px-2 rounded text-lg border-2 border-gray-500 bg-gray-300\" \r\n                                            type=\"number\"\r\n                                            value={chapterFrom}\r\n                                            onChange={event => this.setState({chapterFrom: parseInt(event.target.value)})} />\r\n                                    </div>\r\n                                    <div className=\"flex flex-col\">\r\n                                        <label className=\"mb-1 text-gray-100\" htmlFor=\"\">To</label>\r\n                                        <input className=\"px-2 rounded text-lg border-2 border-gray-500 bg-gray-300\" \r\n                                            type=\"number\"\r\n                                            value={chapterTo}\r\n                                            onChange={event => this.setState({chapterTo: parseInt(event.target.value)})} />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"flex justify-between\">\r\n                                    <div className=\"mb-1\">\r\n                                        <button className=\"px-3 py-1 mr-4 rounded bg-blue-500 text-gray-100 hover:bg-blue-400\"\r\n                                            onClick={() => {\r\n                                                clearPage();\r\n                                                loadPage();\r\n                                            }}>\r\n                                            Generate\r\n                                        </button>\r\n                                        <button className=\"px-3 py-1 rounded bg-gray-600 text-gray-100 hover:bg-gray-500\"\r\n                                            onClick={() => clearPage()}>\r\n                                            Clear\r\n                                        </button>\r\n                                    </div>\r\n                                    <button className=\"px-3 py-1 mb-1 rounded bg-green-500 text-gray-100 hover:bg-green-400\"\r\n                                        onClick={() => theme.toggleTheme()}>\r\n                                        Toggle Theme\r\n                                    </button>\r\n                                </div>\r\n                            </nav>\r\n                            <button className=\"w-full py-2 flex justify-center items-center rounded-b-lg bg-gray-700 text-gray-100 hover:bg-gray-600\"\r\n                                onClick={() => this.toggleNav()}>\r\n                                {(isNavOpen &&\r\n                                    <FontAwesomeIcon icon=\"chevron-up\" />\r\n                                ) ||\r\n                                (!isNavOpen &&\r\n                                    <FontAwesomeIcon icon=\"chevron-down\" />\r\n                                )}\r\n                            </button>\r\n                \r\n                            <main className=\"reading-content\">\r\n                                {(website === \"BoxNovel\" &&\r\n                                    <BoxNovelScraper novelId={novelId} \r\n                                        chapterFrom={chapterFrom} \r\n                                        chapterTo={chapterTo}\r\n                                        loadPage={callable => this.setState({loadPage: callable})}\r\n                                        clearPage={callable => this.setState({clearPage: callable})} />\r\n                                ) ||\r\n                                (website === \"ReadLightNovel\" &&\r\n                                    \r\n                                    <ReadLightNovelScraper novelId={novelId} \r\n                                        chapterFrom={chapterFrom} \r\n                                        chapterTo={chapterTo}\r\n                                        loadPage={callable => this.setState({loadPage: callable})}\r\n                                        clearPage={callable => this.setState({clearPage: callable})} />\r\n                                )}\r\n                            </main>\r\n                        </div>\r\n                    ))}\r\n                </ThemeContext.Consumer>\r\n            </ThemeProvider>\r\n        );\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}